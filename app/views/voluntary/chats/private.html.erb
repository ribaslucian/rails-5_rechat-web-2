<%= render 'menu_user' %>
<style>
    body {
        background-image: url('/assets/telegram_background.jpg');
        background-size: 100% 100%;
        background-repeat: repeat;
    }

    .ws-messages {
        max-height: calc(100% - 115px) !important;
    }

    .ws-message {
        position: relative;
        display: table;
        width: 100%;
    }

    .ws-message-left,
    .ws-message-right {
        display: table;
        max-width: 80%;
        padding: 5px 10px;
        background: white;
        border-radius: 8px;
        margin: 2px 15px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        position: relative;
    }

    .ws-message-left {
        float: left;
    }

    .ws-message-right {
        float: right;
        background-color: #effedd;
    }


    .ws-send-message-painel {
        position: absolute;
        bottom: 0px;
        left: 0px;
        right: 0px;
        padding: 3px 5px;
    }
    .ws-send-message-painel .ui.search {
        float: left; width: calc(100% - 55px)
    }
    .ws-send-message-painel .ui.search input {
        width: 100%; padding: 15px; border: 0px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    }
    .ws-send-message-painel .ui.button {
        float: right;
        padding: 12px;
        padding-bottom: 10px;
        padding-right: 10px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    }
</style>

<div class="ws-mobile-container-y ws-messages">
    <div class="ws-mobile-container-x ws-behavior-messages">
        <% last_side = current_side = nil %>

        <% Message.where("(origin_user_id = #{session[:user]['id']} OR destiny_user_id = #{session[:user]['id']}) AND (contact_id = '#{params[:contact_id]}')").order(:created).each do |m| %>

          <% current_side = m.origin_user_id == session[:user]['id'] ? 'right' : 'left' %>

          <%= '<div style="padding: 4px;"></div>'.html_safe if current_side != last_side %>

          <%= render partial: 'message', locals: {message: m} %>

          <% last_side = current_side %>
        <% end %>
    </div>
</div>


<div class="ws-send-message-painel">
    <div class="ws-mobile-container-x">
        <div class="ui search" >
            <input class="prompt behavior-input-type-message" type="text" placeholder="Digite uma mensagem..." autofocus="autofocus" />
        </div>

        <div class="ui button icon circular blue shadow-button behavior-button-send-message">
            <span class="material-icons">send</span>
        </div>
    </div>
</div>



<style>
    .scroll-item {
        background-color: blue !important;
    }
    .scroll-item.is-active {
        background-color: #0e8824 !important;
    }
</style>

<script>
  $(document).ready(function () {
      CONTACT_ID = <%= params[:contact_id] %>;

<%#*$('.ws-messages').scrollTop(1000000000);%>

      /*var container_start = $('.ws-mobile-container-y').position().top;
       var container_end = container_start + $('.ws-mobile-container-y').height();
       
       function visible_messages_calc() {
       var total_times = [];
       var times = [];
       var time;
       
       $('.ws-mobile-container-y').scroll(function (event) {
       $('.scroll-item').each(function (i) {
       var child_start = $(this).offset().top;
       var child_middle = $(this).height() / 2;
       var id = $('[message-id]', $(this)).attr('message-id');
       
       if (!(id in total_times))
       total_times[id] = 0;
       
       if (
       ((child_start + child_middle) >= container_start) // comparar top do container
       && ((child_start + child_middle) <= container_end) // comparar bot do container
       ) {
       
       // verificar se já nao estava ativo
       if (!$(this).hasClass('is-active')) {
       times[id] = new Date();
       $(this).addClass('is-active');
       }
       
       } else {
       // verificar se estava ativo de fato
       if ($(this).hasClass('is-active')) {
       time = ((new Date()) - times[id]) / 1000;
       total_times[id] = total_times[id] + time;
       
       l(id + ': TEMPO VISUALIZADO: ' + total_times[id]);
       times[id] = 0;
       
       $(this).removeClass('is-active');
       }
       }
       });
       });
       }
       
       visible_messages_calc();*/

      // onload
      // iniciar contagem de interação (foco e visualização) da ultima mensagem
      // (caso ela seja do pesquisado e caso ainda não tenha sido visualizada).
      // 
      // scroll
      // iniciar contagem de interação (foco e visualização) das mensagens visiveis.
      //
      // onexit
      // enviar informações de visualização e tempo de foco para o painel

      /*
       ordenar
       https://stackoverflow.com/questions/21267120/sort-by-id-element-using-jquery 
       $("#cat li").sort(function (a, b) {
       return parseInt(a.id) > parseInt(b.id);
       }).each(function () {
       var elem = $(this);
       elem.remove();
       $(elem).appendTo("#cat");
       });*/


      function capture_interaction_start() {
          var time;

          $('.scroll-item').each(function (i) {
              var child_start = $(this).offset().top;
              var child_middle = $(this).height() / 2;
              var id = $('[message-id]', $(this)).attr('message-id');

              if (!(id in total_times))
                  total_times[id] = 0;

              if (
                      ((child_start + child_middle) >= container_start) // comparar top do container
                      && ((child_start + child_middle) <= container_end) // comparar bot do container
                      ) {

                  // verificar se já nao estava ativo
                  if (!$(this).hasClass('is-active')) {

                      // iniciar tempo do foco atual
                      times[id] = new Date();

                      $(this).addClass('is-active');
                  }

              } else {
                  // verificar se estava ativo de fato
                  if ($(this).hasClass('is-active')) {
                      time = ((new Date()) - times[id]) / 1000;
                      total_times[id] = total_times[id] + time;

                      l(id + ': TEMPO VISUALIZADO: ' + total_times[id]);

                      // zerar tempo do foco atua
                      times[id] = 0;

                      $(this).removeClass('is-active');
                  }
              }
          });
      }

      var total_times = [];
      var times = [];
      var container_start = $('.ws-mobile-container-y').position().top;
      var container_end = container_start + $('.ws-mobile-container-y').height();

      $('.ws-mobile-container-y').scroll(function () {
          capture_interaction_start();
      });
      
      capture_interaction_start();
  });
</script>

<div class="ui modal ws-behavior-modal-favorite">
    <i class="close icon"></i>
    <div class="header">
        Compartilhar
    </div>

    <div class="image content">
        <div class="ui medium image">
            <img src="/images/avatar/large/chris.jpg">
        </div>
        <div class="description">
            <div class="ui header">We've auto-chosen a profile image for you.</div>
            <p>We've grabbed the following image from the <a href="https://www.gravatar.com" target="_blank">gravatar</a> image associated with your registered e-mail address.</p>
            <p>Is it okay to use this photo?</p>
        </div>
    </div>
    <div class="actions">
        <div class="ui black deny button">
            Cancelar
        </div>

        <div class="ui positive right labeled icon button">
            Compartilhar
            <i class="checkmark icon"></i>
        </div>
    </div>
</div>